{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose name contains 'Dupond' and their associated entities, addresses and relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[of:officer_of]->(e:Entity)-[ra:registered_address]->(a:Address) WHERE toLower(o.name) CONTAINS toLower('dupond') RETURN o, of, e, ra, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose names contain 'Dupuis', along with their associated entities, addresses and relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[of:officer_of]->(e:Entity)-[ra:registered_address]->(a:Address) WHERE toLower(o.name) CONTAINS toLower('dupuis') RETURN o, of, e, ra, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose names contain 'Truc', along with their associated entities, addresses and relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[of:officer_of]->(e:Entity)-[ra:registered_address]->(a:Address) WHERE toLower(o.name) CONTAINS toLower('Truc') RETURN o, of, e, ra, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers whose names contain '%name%', along with their associated entities, addresses and relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[of:officer_of]->(e:Entity)-[ra:registered_address]->(a:Address) WHERE toLower(o.name) CONTAINS toLower('%name%') RETURN o, of, e, ra, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers whose names contain %name%, along with their associated entities, addresses and relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[of:officer_of]->(e:Entity)-[ra:registered_address]->(a:Address) WHERE toLower(o.name) CONTAINS toLower('%name%') RETURN o, of, e, ra, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities registered in a specific country with their associated relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r:registered_address]->(a:Address) WHERE toLower(a.country) = 'france' RETURN e, r, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the intermediaries whose name is similar to another intermediary, with their associated relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i1:Intermediary)-[r:similar]->(i2:Intermediary) RETURN i1, r, i2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose service_provider is 'XYZ Corp' and which have officers with active status, with their associated relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r:officer_of]->(o:Officer)-[r2:registered_address]->(a:Address) WHERE toLower(e.service_provider) = 'xyz corp' AND toLower(o.status) = 'active' RETURN e, r, o, r2, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all intermediaries who are also officers and have associated entities, with their associated relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i:Intermediary)-[r:officer_of]->(e:Entity)-[r2:intermediary_of]->(i2:Intermediary) RETURN i, r, e, r2, i2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all officers who are also intermediaries, and whose associated entities have addresses registered in a specific country. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r:officer_of]->(e:Entity)-[r2:registered_address]->(a:Address) WHERE (o)-[:intermediary_of]->() AND toLower(a.country) = 'france' RETURN o, r, e, r2, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose registered addresses are in a country other than that of the service_provider, with their associated intermediaries and officers. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r1:registered_address]->(a:Address)<-[:registered_address]-(e)-[r2:officer_of]->(o:Officer)-[:intermediary_of]->(i:Intermediary) WHERE NOT toLower(e.service_provider) = toLower(a.country) RETURN e, r1, a, r2, o, i"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose service_provider is 'ABC Corp' and which have intermediaries similar to 'XYZ Ltd', with their associated officers and addresses. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r1:similar]->(i:Intermediary)-[r2:officer_of]->(o:Officer)-[r3:registered_address]->(a:Address) WHERE toLower(e.service_provider) = 'abc corp' AND toLower(i.name) = 'xyz ltd' RETURN e, r1, i, r2, o, r3, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all officers who are also intermediaries and have associated entities with 'Active' status, as well as their relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r1:officer_of]->(e:Entity)-[r2:intermediary_of]->(i:Intermediary) WHERE toLower(o.status) = 'actif' AND (o)-[:intermediary_of]->() RETURN o, r1, e, r2, i"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all officers who are also intermediaries and have associated entities with addresses registered in a specific country, along with their associated relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r1:officer_of]->(e:Entity)-[r2:registered_address]->(a:Address {countries:toLower('france')}) WHERE (o)-[:intermediary_of]->(e) RETURN o, r1, e, r2, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose service_provider is 'ABC Corp' and which have intermediaries similar to 'XYZ Ltd', with their associated officers and addresses. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r1:similar]->(i:Intermediary)-[r2:officer_of]->(o:Officer)-[r3:registered_address]->(a:Address) WHERE toLower(e.service_provider) = 'abc corp' AND toLower(i.name) = 'xyz ltd' RETURN e, r1, i, r2, o, r3, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all officers who are also intermediaries and have associated entities with 'Active' status, as well as their relationships. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r1:officer_of]->(e:Entity)-[r2:intermediary_of]->(i:Intermediary) WHERE toLower(o.status) = 'actif' AND (o)-[:intermediary_of]->() RETURN o, r1, e, r2, i"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Intermediarys \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i:Intermediary) RETURN i"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entitys \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all adresses \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (a:Address) RETURN a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers and their associated entities \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r1:officer_of]->(e:Entity) RETURN o, r1, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Intermediary and associated entities \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i:Intermediary)-[r1:intermediary_of]->(e:Entity) RETURN i, r1, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities and their registered addresses \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r:registered_address]->(a:Address) RETURN e, r, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities and their associated entities \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e1:Entity)-[r:same_as]->(e2:Entity) RETURN e1, r, e2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers and their associated entities with registered addresses \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r1:officer_of]->(e:Entity)-[r2:registered_address]->(a:Address) RETURN o, r1, e, r2, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers whose names contain Cahuzac and their associated entities with registered addresses. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r1:officer_of]->(e:Entity)-[r2:registered_address]->(a:Address) WHERE toLower(o.name) CONTAINS 'cahuzac' RETURN o, r1, e, r2, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers but also their associated entities with registered addresses if any \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) OPTIONAL MATCH (o)-[r1:officer_of]->(e:Entity)-[r2:registered_address]->(a:Address) RETURN o, r1, e, r2, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all companies with the same intermediary \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r1:intermediary_of]->(i:Intermediary)<-[r2:intermediary_of]-(e2:Entity) RETURN e, r1, i, r2, e2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all companies with the same intermediary and their registered addresses \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r1:intermediary_of]->(i:Intermediary)<-[r2:intermediary_of]-(e2:Entity)-[r3:registered_address]->(a:Address) RETURN e, r1, i, r2, e2, r3, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all companies and their registered addresses, if any \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) OPTIONAL MATCH (e)-[r1:registered_address]->(a:Address) RETURN e, r1, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all companies with a registered address \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r1:registered_address]->(a:Address) RETURN e, r1, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all companies with a registered address and their intermediaries, if any \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[r1:registered_address]->(a:Address) OPTIONAL MATCH (e)-[r2:intermediary_of]->(i:Intermediary) RETURN e, r1, a, r2, i"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose names begin with 'cah'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) STARTS WITH toLower('cah') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose name begins with 'Dupu'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) STARTS WITH toLower('dupu') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose names begin with DUPO \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) STARTS WITH toLower('dupo') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose name begins with 'TrUC'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) STARTS WITH toLower('truc') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers whose name begins with '%name%'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) STARTS WITH toLower('%name%') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers whose name begins with %name% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) STARTS WITH toLower('%name%') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose names contain 'cah'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) CONTAINS toLower('cah') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose name contains 'Dupu'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) CONTAINS toLower('dupu') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose names contain DUPO \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) CONTAINS toLower('dupo') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officer names that contain 'TrUC'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) CONTAINS toLower('truc') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers whose name contains '%name%'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) CONTAINS toLower('%name%') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers whose name contains %name% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) CONTAINS toLower('%name%') RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers with the same name \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer)-[r:same_name_as]->(o2:Officer) RETURN o1, r, o2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers with the same name who are related to a company. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer)-[r:same_name_as]->(o2:Officer)-[:officer_of]->(e:Entity) RETURN o1, r, o2, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the Officers who are probably the same \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer)-[r:probably_same_officer_as]->(o2:Officer) RETURN o1, r, o2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all officers who have the same intermediary \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer)-[r:intermediary_of]->(e:Entity)<-[r2:intermediary_of]-(o2:Officer) RETURN o1, r, e, r2, o2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers who have the same intermediary and who are connected to a company. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer)-[r:intermediary_of]->(e:Entity)<-[r2:intermediary_of]-(o2:Officer)-[:officer_of]->(e2:Entity) RETURN o1, r, e, r2, o2, e2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all nodes that don't have id 2 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) WHERE n.node_id <> 2 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all nodes that don't have id 3 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) WHERE n.node_id <> 3 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities registered at the address '123 Main Street'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Entity)-[r:registered_address]->(m:Address) WHERE toLower(m.address) CONTAINS toLower('123 Main Street') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities registered at address '%address%'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Entity)-[r:registered_address]->(m:Address) WHERE toLower(m.address) CONTAINS toLower('%address%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the entities to which Officer 'John Doe' is linked \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE toLower(n.name) CONTAINS toLower('John Doe') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find intermediaries with 'Inactive' status \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Intermediary) WHERE toLower(n.status) = toLower('Inactive') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds entities under 'Delaware' jurisdiction \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Entity) WHERE toLower(n.jurisdiction) = toLower('Delaware') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the Officers who have the same intermediary and who are linked to a company with the same name. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer)-[r:intermediary_of]->(e:Entity)<-[r2:intermediary_of]-(o2:Officer)-[:officer_of]->(e2:Entity)-[r3:same_name_as]->(o3:Officer) RETURN o1, r, e, r2, o2, e2, r3, o3"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers who have the same intermediary and who are linked to one company and who have the same name and who are linked to another company. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer)-[r:intermediary_of]->(e:Entity)<-[r2:intermediary_of]-(o2:Officer)-[:officer_of]->(e2:Entity)-[r3:same_name_as]->(o3:Officer)-[:officer_of]->(e3:Entity) RETURN o1, r, e, r2, o2, e2, r3, o3, e3"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the intermediaries acting for 'ABC Company'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i:Intermediary)-[r:intermediary_of]->(e:Entity) WHERE toLower(e.name) = toLower('ABC Company') RETURN i, r, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the intermediaries who act for %entity%. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i:Intermediary)-[r:intermediary_of]->(e:Entity) WHERE toLower(e.name) = toLower('%entity%') RETURN i, r, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all officers and their companies involved in similar ventures \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r1:similar]->(o2:Officer)-[r2:officer_of]->(e:Entity) RETURN o, r1, o2, r2, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all officers who are intermediaries for companies in Panama \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r:intermediary_of]->(e:Entity)-[:registered_address]->(a:Address) WHERE toLower(a.countries) CONTAINS toLower('Panama') RETURN o, r, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the companies that have an intermediary in common \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer)-[r1:intermediary_of]->(e:Entity)<-[r2:intermediary_of]-(o2:Officer) RETURN o1, r1, e, r2, o2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers whose name contains 'cahuzac' and all nodes linked to these Officers. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[r1]-(o2) WHERE toLower(o.name) CONTAINS toLower('cahuzac') RETURN o, r1, o2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities whose incorporation date is in 2009 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.incorporation_date) CONTAINS toLower('2009') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities without an incorporation date \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.incorporation_date) = toLower('') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities that don't have an inactivation date \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.inactivation_date) = toLower('') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities whose inactivation date is in 2015 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.inactivation_date) CONTAINS toLower('2015') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities whose inactivation date is in 2020 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.inactivation_date) CONTAINS toLower('2020') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities whose inactivation date is in %date% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.inactivation_date) CONTAINS toLower('%date%') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose service provider is 'Panama Papers'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.service_provider) CONTAINS toLower('Panama Papers') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose service provider is 'Offshore Leaks'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.service_provider) CONTAINS toLower('Offshore Leaks') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose service provider is %provider%. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.service_provider) CONTAINS toLower('%provider%') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose service provider is '%provider%'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.service_provider) CONTAINS toLower('%provider%') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose status is 'Active'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.status) CONTAINS toLower('Active') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose status is '%status%'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.status) CONTAINS toLower('%statut%') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all entities whose status is %status% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.status) CONTAINS toLower('%statut%') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities without status \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity) WHERE toLower(e.status) = toLower('') RETURN e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the officer with the most companies \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[:officer_of]->(e:Entity) WITH o, count(e) as count ORDER BY count DESC RETURN o LIMIT 1"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the 5 entities with the most officers \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)<-[:officer_of]-(:Officer) WITH e, count(*) as count ORDER BY count DESC RETURN e LIMIT 5"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the intermediary with the most entities \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity) WITH i, count(e) as count ORDER BY count DESC RETURN i LIMIT 1"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the officer with the most entities from the country France \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[:officer_of]->(e:Entity) WHERE toLower(e.countries) CONTAINS toLower('France') WITH o, count(e) as count ORDER BY count DESC RETURN o LIMIT 1"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds the officer with the most entities in the country '%country%'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[:officer_of]->(e:Entity) WHERE toLower(e.countries) CONTAINS toLower('%country%') WITH o, count(e) as count ORDER BY count DESC RETURN o LIMIT 1"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the officer with the most country entities %country% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[:officer_of]->(e:Entity) WHERE toLower(e.countries) CONTAINS toLower('%country%') WITH o, count(e) as count ORDER BY count DESC RETURN o LIMIT 1"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the 5 entities with most intermediaries \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)<-[:intermediary_of]-(:Intermediary) WITH e, count(*) as count ORDER BY count DESC RETURN e LIMIT 5"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the entity with the most intermediaries in the country France \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)<-[:intermediary_of]-(:Intermediary) WHERE toLower(e.countries) CONTAINS toLower('France') WITH e, count(*) as count ORDER BY count DESC RETURN e LIMIT 1"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds the entity with the most intermediaries in country '%country%'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)<-[:intermediary_of]-(:Intermediary) WHERE toLower(e.countries) CONTAINS toLower('%country%') WITH e, count(*) as count ORDER BY count DESC RETURN e LIMIT 1"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds the entity with the most country intermediaries %country% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)<-[:intermediary_of]-(:Intermediary) WHERE toLower(e.countries) CONTAINS toLower('%country%') WITH e, count(*) as count ORDER BY count DESC RETURN e LIMIT 1"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the entity with the most intermediaries with all its intermediaries \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)<-[:intermediary_of]-(i:Intermediary) WITH e, count(i) as count ORDER BY count DESC LIMIT 1 MATCH (e)<-[r:intermediary_of]-(i:Intermediary) RETURN e, r, i"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the officer with the most entities with all its entities \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[:officer_of]->(e:Entity) WITH o, count(e) as count ORDER BY count DESC LIMIT 1 MATCH (o)-[r:officer_of]->(e:Entity) RETURN o, r, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all nodes linked to the officer whose name contains 'Cahuzac'. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) CONTAINS toLower('Cahuzac') MATCH (o)-[r]-(n) RETURN o, r, n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all nodes linked to the officer whose name contains 'Cahuzac' and the entities linked to these nodes. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer) WHERE toLower(o.name) CONTAINS toLower('Cahuzac') MATCH (o)-[r]-(n) MATCH (n)<-[r2]-(e:Entity) RETURN o, r, n, r2, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds the node with the most relations and returns all its relations \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n)-[r]-(m) WITH n, count(r) as count ORDER BY count DESC LIMIT 1 MATCH (n)-[r]-(m) RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all nodes \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all nodes and their relationships \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n)-[r]-(m) RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all nodes with id 1 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) WHERE n.node_id = 1 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all nodes with id 2 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) WHERE n.node_id = 2 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all nodes with id 3 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) WHERE n.node_id = 3 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all nodes with id %id% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) WHERE n.node_id = %id% RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers who have an entity in France \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE toLower(m.countries) CONTAINS toLower('France') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers with a %country% entity \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE toLower(m.countries) CONTAINS toLower('%country%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers who have no entity in France \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE NOT toLower(m.countries) CONTAINS toLower('France') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers with no %country% entity \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE NOT toLower(m.countries) CONTAINS toLower('%country%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers who have an entity in France and who are active in the field. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE toLower(m.countries) CONTAINS toLower('France') AND toLower(n.status) CONTAINS toLower('active') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers who have an entity in %country% and who are active \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE toLower(m.countries) CONTAINS toLower('%country%') AND toLower(n.status) CONTAINS toLower('active') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all active Officers who have no entity in France \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE NOT toLower(m.countries) CONTAINS toLower('France') AND toLower(n.status) CONTAINS toLower('active') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers who don't have an entity in %country% and who are active \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:officer_of]->(m:Entity) WHERE NOT toLower(m.countries) CONTAINS toLower('%country%') AND toLower(n.status) CONTAINS toLower('active') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all nodes that don't have id 1 \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) WHERE n.node_id <> 1 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all nodes that don't have id %id% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n) WHERE n.node_id <> %id% RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Officers who have an address in France \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:registered_address]->(m:Address) WHERE toLower(m.countries) CONTAINS toLower('France') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all Officers who have an address in %country%. \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:registered_address]->(m:Address) WHERE toLower(m.countries) CONTAINS toLower('%country%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all officers who have no address in France \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:registered_address]->(m:Address) WHERE NOT toLower(m.countries) CONTAINS toLower('France') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all officers who don't have an address in %country% \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:registered_address]->(m:Address) WHERE NOT toLower(m.countries) CONTAINS toLower('%country%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all active officers with no address in France \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:registered_address]->(m:Address) WHERE NOT toLower(m.countries) CONTAINS toLower('France') AND n.status = 'Active' RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all active officers without a %country% address \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:registered_address]->(m:Address) WHERE NOT toLower(m.countries) CONTAINS toLower('%country%') AND n.status = 'Active' RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the crimes that took place at the address '123 Main Street'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime)-[r:OCCURRED_AT]->(m:Location) WHERE toLower(m.address) CONTAINS toLower('123 Main Street') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all crimes that took place at the address '%address%'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime)-[r:OCCURRED_AT]->(m:Location) WHERE toLower(m.address) CONTAINS toLower('%address%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the people who have committed a crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:PARTY_TO]->(m:Crime) RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find a person with the name 'John Doe'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person) WHERE toLower(n.name) = toLower('John Doe') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the crimes committed by a person whose name is 'John Doe'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:PARTY_TO]->(m:Crime) WHERE toLower(n.name) = toLower('John Doe') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all phone calls lasting more than 10 minutes \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WHERE toInteger(n.call_duration) > 10 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all telephone calls lasting more than 10 minutes made on January 1, 2020. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WHERE toInteger(n.call_duration) > 10 AND toLower(n.call_date) = '2020-01-01' RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds crime with ID 'CR123456' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) WHERE toLower(n.id) = toLower('CR123456') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds the crime with ID '%crime_id%' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) WHERE toLower(n.id) = toLower('%crime_id%') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the cars involved in the crime with ID 'CR123456'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime)-[r:INVOLVED_IN]->(m:Vehicle) WHERE toLower(n.id) = toLower('CR123456') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds cars involved in crime with ID '%crime_id%'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime)-[r:INVOLVED_IN]->(m:Vehicle) WHERE toLower(n.id) = toLower('%crime_id%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find crimes involving a 'Toyota' car \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle) WHERE toLower(n.make) = toLower('Toyota') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find crimes involving a car of the make 'Toyota' and model 'Corolla'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle) WHERE toLower(n.make) = toLower('Toyota') AND toLower(n.model) = toLower('Corolla') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find crimes involving a car of make 'Toyota' and model 'Corolla' and registration '123ABC'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle) WHERE toLower(n.make) = toLower('Toyota') AND toLower(n.model) = toLower('Corolla') AND toLower(n.reg) = toLower('123ABC') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find crimes involving a car of the make '%make%' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle) WHERE toLower(n.make) = toLower('%make%') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the police officers who investigated a crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer)<-[r:INVESTIGATED_BY]-(m:Crime) RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the police officers who investigated a crime with the ID 'CR123456'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer)<-[r:INVESTIGATED_BY]-(m:Crime) WHERE toLower(m.id) = toLower('CR123456') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find police officers who have investigated a crime with the ID '%crime_id%'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer)<-[r:INVESTIGATED_BY]-(m:Crime) WHERE toLower(m.id) = toLower('%crime_id%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the officer with the badge '123456' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer) WHERE toLower(n.badge_no) = toLower('123456') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the officer with the badge '%badge_no%' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer) WHERE toLower(n.badge_no) = toLower('%badge_no%') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find objects of type 'Evidence' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object) WHERE toLower(n.type) = toLower('Evidence') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds objects of type 'Evidence' with ID 'OB123456' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object) WHERE toLower(n.type) = toLower('Evidence') AND toLower(n.id) = toLower('OB123456') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds objects of type 'Evidence' with ID '%object_id%' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object) WHERE toLower(n.type) = toLower('Evidence') AND toLower(n.id) = toLower('%object_id%') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the objects involved in a crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object)-[r:INVOLVED_IN]->(m:Crime) RETURN n,r,m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds objects involved in a crime with ID 'CR123456' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object)-[r:INVOLVED_IN]->(m:Crime) WHERE toLower(m.id) = toLower('CR123456') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds objects involved in a crime with ID '%crime_id%'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object)-[r:INVOLVED_IN]->(m:Crime) WHERE toLower(m.id) = toLower('%crime_id%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find the cars involved in a crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle)-[r:INVOLVED_IN]->(m:Crime) RETURN n,r,m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds cars involved in a crime with the ID 'CR123456'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle)-[r:INVOLVED_IN]->(m:Crime) WHERE toLower(m.id) = toLower('CR123456') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds cars involved in a crime with ID '%crime_id%'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle)-[r:INVOLVED_IN]->(m:Crime) WHERE toLower(m.id) = toLower('%crime_id%') RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all phone calls that took place after 6 p.m. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WHERE toInteger(split(n.call_time, ':')[0]) > 18 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all telephone calls that took place after 6 p.m. and lasted more than 10 minutes. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WHERE toInteger(split(n.call_time, ':')[0]) > 18 AND toInteger(n.call_duration)) > 10 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all telephone calls that took place after 6 p.m. and lasted more than 10 minutes and were placed through the number '1234567890'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WHERE toInteger(split(n.call_time, ':')[0]) > 18 AND toInteger(n.call_duration) > 10 AND toLower(n.phoneNo) = toLower('1234567890') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all phone calls that took place after 6pm and lasted more than 10 minutes and that were placed through the number '%phone_no%'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WHERE toInteger(split(n.call_time, ':')[0]) > 18 AND toInteger(n.call_duration) > 10 AND toLower(n.phoneNo) = toLower('%phone_no%') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all telephone calls made after January 1, 2020 \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WITH n, [item in split(n.call_date, '/') | toInteger(item)] as date WHERE date[2] > 2020 OR (date[2] = 2020 AND (date[1] > 1 OR (date[1] = 1 AND date[0] > 1))) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all telephone calls that took place after January 1, 2020 and lasted more than 10 minutes. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WITH n, [item in split(n.call_date, '/') | toInteger(item)] as date WHERE date[2] > 2020 OR (date[2] = 2020 AND (date[1] > 1 OR (date[1] = 1 AND date[0] > 1))) AND toInteger(n.call_duration) > 10 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all telephone calls that took place after January 1, 2020 and lasted more than 10 minutes and were placed through the number '1234567890'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WITH n, [item in split(n.call_date, '/') | toInteger(item)] as date WHERE date[2] > 2020 OR (date[2] = 2020 AND (date[1] > 1 OR (date[1] = 1 AND date[0] > 1))) AND toInteger(n.call_duration) > 10 AND toLower(n.phoneNo) = toLower('1234567890') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all crimes that took place after January 1, 2020 \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) WITH n, [item in split(n.date, '/') | toInteger(item)] as date WHERE date[2] > 2020 OR (date[2] = 2020 AND (date[1] > 1 OR (date[1] = 1 AND date[0] > 1))) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all 'Vehicle Crime' crimes \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) WHERE toLower(n.type) = toLower('Vehicle Crime') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all crimes of type '%crime_type%' \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) WHERE toLower(n.type) = toLower('%crime_type%') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all crimes that took place after January 1, 2020 and are currently under investigation. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) WHERE toLower(n.last_outcome) CONTAINS toLower('Under investigation') AND (toInteger(split(n.date, '/')[2]) > 2020 OR (toInteger(split(n.date, '/')[2]) = 2020 AND (toInteger(split(n.date, '/')[1]) > 1 OR (toInteger(split(n.date, '/')[1]) = 1 AND toInteger(split(n.date, '/')[0]) > 1))) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the people who have suffered a crime involving a car \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:PARTY_TO]->(m:Crime)<-[r2:INVOLVED_IN]-(o:Vehicle) RETURN n, r, m, r2, o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all persons who are related to a person \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:FAMILY_REL]->(m:Person) RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all related persons involved in the same crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:FAMILY_REL]->(m:Person)-[r2:PARTY_TO]->(o:Crime) RETURN n, r, m, r2, o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the nodes \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find 25 postcodes \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PostCode) RETURN n LIMIT 25"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds 25 phone calls \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) RETURN n LIMIT 25"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find 25 crimes \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) RETURN n LIMIT 25"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all Gmail emails \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Email) WHERE toLower(n.email_address) CONTAINS toLower('@gmail.com') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Finds all people living in the area with the zip code 'AB10'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[:CURRENT_ADDRESS]->(:Location)-[:HAS_POSTCODE]->(m:PostCode) WHERE toLower(m.code) = toLower('AB10') RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Returns all emails from the person with the phone number '1234567890'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Email)<-[r1:HAS_EMAIL]-(o:Person)-[r2:HAS_PHONE]->(p:Phone) WHERE toLower(p.phoneNo) = toLower('1234567890') RETURN n, r1, o, r2, p"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all people with multiple phone numbers \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:HAS_PHONE]->(m:Phone) WITH n, count(m) as phone_count WHERE phone_count > 1 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the people who have multiple emails \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:HAS_EMAIL]->(m:Email) WITH n, count(m) as email_count WHERE email_count > 1 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the people who have suffered more than one crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:PARTY_TO]->(m:Crime) WITH n, count(m) as crime_count WHERE crime_count > 1 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the people who have suffered a crime involving a car \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:PARTY_TO]->(m:Crime)-[r2:INVOLVED_IN]->(o:Vehicle) RETURN n, r, m, r2, o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all related persons involved in the same crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[r:FAMILY_REL]->(m:Person)-[r2:PARTY_TO]->(o:Crime) RETURN n, r, m, r2, o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all people over 50 who have suffered a crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person) WHERE toInteger(n.age) > 50 MATCH (n)-[r:PARTY_TO]->(m:Crime) RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all persons \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all locations \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Location) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all phone calls \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the crimes \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all vehicles \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all emails \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Email) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all postal codes \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PostCode) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the officers \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all zones \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Area) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the objects \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the officers who investigated a crime \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer)-[r:INVESTIGATED_BY]->(m:Crime) RETURN n, r, m"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the officers who investigated a crime involving a vehicle. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer)<-[r:INVESTIGATED_BY]->(m:Crime)<-[r2:INVOLVED_IN]-(o:Vehicle) RETURN n, r, m, r2, o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all the officers who investigated a crime involving an object. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer)<-[r:INVESTIGATED_BY]->(m:Crime)<-[r2:INVOLVED_IN]-(o:Object) RETURN n, r, m, r2, o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all crimes involving a vehicle and an object \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object)-[r:INVOLVED_IN]->(m:Crime)<-[r2:INVOLVED_IN]-(o:Vehicle)  RETURN n, r, m, r2, o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all crimes where an object was involved and an officer investigated \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object)-[r:INVOLVED_IN]->(m:Crime)-[r2:INVESTIGATED_BY]->(o:Officer) RETURN n, r, m, r2, o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all persons named John. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person {name: 'John'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Show me all locations with the postcode 12345. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Location {postcode: '12345'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Retrieve all phone numbers. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Phone) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all email addresses. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Email) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all officers with the rank of Sergeant. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer {rank: 'Sergeant'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all crimes that occurred in 2021. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime) WHERE n.date CONTAINS '2021' RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Show all vehicles made by Toyota. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle {make: 'Toyota'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all phone calls made on 2021-05-21. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall {call_date: '2021-05-21'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Retrieve all persons with the surname Smith. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person {surname: 'Smith'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all locations within latitude range 40 to 50. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Location) WHERE n.latitude >= 40 AND n.latitude <= 50 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all officers named Jane Doe. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Officer {name: 'Jane', surname: 'Doe'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all crimes of type burglary. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime {type: 'burglary'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Show all objects with the description 'knife'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Object {description: 'knife'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Retrieve all areas with area code A1. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Area {areaCode: 'A1'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all phone calls with a duration over 5 minutes. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:PhoneCall) WHERE n.call_duration > '00:05:00' RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all vehicles with registration number ABC123. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Vehicle {reg: 'ABC123'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Show all crimes investigated by officer with badge number 789. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Crime)-[:INVESTIGATED_BY]->(o:Officer {badge_no: '789'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all persons who know someone named Alice. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Person)-[:KNOWS]->(p:Person {name: 'Alice'}) RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Retrieve all locations with longitude between -100 and -90. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Location) WHERE n.longitude >= -100 AND n.longitude <= -90 RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all email addresses ending with '@example.com'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (n:Email) WHERE n.email_address ENDS WITH '@example.com' RETURN n"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find everyone who lives at 123 Main St. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p:Person)-[:CURRENT_ADDRESS]->(l:Location {address: '123 Main St'}) RETURN p"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all the people who called the 555-1234 telephone number. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p:Person)-[:HAS_PHONE]->(ph:Phone {phoneNo: '555-1234'}) RETURN p"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Show all crimes that occurred at latitude 48.8566 and longitude 2.3522. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (c:Crime)-[:OCCURRED_AT]->(l:Location {latitude: 48.8566, longitude: 2.3522}) RETURN c"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all people who know someone with the email alice@example.com. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p:Person)-[:KNOWS]->(f:Person)-[:HAS_EMAIL]->(e:Email {email_address: 'alice@example.com'}) RETURN p"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all cars involved in crimes by 2023. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (v:Vehicle)-[:INVOLVED_IN]->(c:Crime) WHERE c.date CONTAINS '2023' RETURN v"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find everyone with a phone number and an email address. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (:Email)<-[:HAS_EMAIL]-(p:Person)-[:HAS_PHONE]->(:Phone) RETURN p"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Show all people living in the area with postal code 75001. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p:Person)-[:CURRENT_ADDRESS]->(l:Location)-[:HAS_POSTCODE]->(pc:PostCode {code: '75001'}) RETURN p"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all officers who have investigated theft-related offences. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (o:Officer)-[:INVESTIGATED_BY]->(c:Crime {type: 'vol'}) RETURN o"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all offences where a 'weapon' type object is involved. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (c:Crime)-[:INVOLVED_IN]->(o:Object {type: 'weapon'}) RETURN c"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Obtenir toutes les personnes avec un badge d'officier et ayant un num\u00e9ro de t\u00e9l\u00e9phone. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p:Person)-[:HAS_PHONE]->(:Phone)-[:INVESTIGATED_BY]->(:Officer) RETURN p"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Display all family relationships between people named 'Mary' and 'Paul'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p1:Person {name: 'Marie'})-[r:FAMILY_REL]->(p2:Person {name: 'Paul'}) RETURN p1, r, p2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all infringements occurring in zones with zone code 'A2'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (c:Crime)-[r1:OCCURRED_AT]->(l:Location)-[r2:LOCATION_IN_AREA]->(a:Area {areaCode: 'A2'}) RETURN c, r1, l, r2, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all phone calls made by people with the surname 'Dupont'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p:Person {surname: 'Dupont'})-[:HAS_PHONE]->(ph:Phone)<-[:CALLER]-(pc:PhoneCall) RETURN pc"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all offences where the note contains 'dangerous weapon'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (c:Crime) WHERE c.note CONTAINS 'dangerous weapon' RETURN c"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all vehicles involved in offences and owned by people named 'Jean'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (v:Vehicle)-[:INVOLVED_IN]->(c:Crime)<-[:PARTY_TO]-(p:Person {name: 'Jean'}) RETURN v"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all offences investigated by officers with an 'A' badge. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (c:Crime)-[:INVESTIGATED_BY]->(o:Officer) WHERE o.badge_no STARTS WITH 'A' RETURN c"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all 'friend' relationships between people. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p1:Person)-[r:KNOWS]->(p2:Person) RETURN p1, r, p2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Show all offenses that occurred at a specific address in the neighborhood with zone code 'B1'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (c:Crime)-[:OCCURRED_AT]->(l:Location {address: '123 Boulevard'})-[:LOCATION_IN_AREA]->(a:Area {areaCode: 'B1'}) RETURN c"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all people involved in offenses with a description containing 'fraud'. \nSchema: Node properties are the following: \":Person {surname: STRING, nhs_no: STRING, name: STRING, age: STRING},:Location {latitude: FLOAT, postcode: STRING, longitude: FLOAT, address: STRING},:Phone {phoneNo: STRING},:Email {email_address: STRING},:Officer {badge_no: STRING, rank: STRING, name: STRING, surname: STRING},:PostCode {code: STRING},:Area {areaCode: STRING},:PhoneCall {call_duration: STRING, call_time: STRING, call_date: STRING, call_type: STRING},:Crime {date: STRING, id: STRING, type: STRING, last_outcome: STRING, note: STRING, charge: STRING},:Object {description: STRING, id: STRING, type: STRING},:Vehicle {model: STRING, reg: STRING, make: STRING, year: STRING}\" Relationship properties are the following: \":CURRENT_ADDRESS {},:HAS_PHONE {},:HAS_EMAIL {},:HAS_POSTCODE {},:POSTCODE_IN_AREA {},:LOCATION_IN_AREA {},:KNOWS_SN {},:KNOWS {},:CALLER {},:CALLED {},:KNOWS_PHONE {},:OCCURRED_AT {},:INVESTIGATED_BY {},:INVOLVED_IN {},:PARTY_TO {},:FAMILY_REL {rel_type: STRING},:KNOWS_LW {}\" Relationship point from source to target nodes \"(:Person)-[:FAMILY_REL]->(:Person),(:Person)-[:CURRENT_ADDRESS]->(:Location),(:Person)-[:KNOWS]->(:Person),(:Person)-[:HAS_PHONE]->(:Phone),(:Person)-[:KNOWS_PHONE]->(:Person),(:Person)-[:HAS_EMAIL]->(:Email),(:Person)-[:KNOWS_SN]->(:Person),(:Person)-[:KNOWS_LW]->(:Person),(:Person)-[:PARTY_TO]->(:Crime),(:Location)-[:LOCATION_IN_AREA]->(:Area),(:Location)-[:HAS_POSTCODE]->(:PostCode),(:PostCode)-[:POSTCODE_IN_AREA]->(:Area),(:PhoneCall)-[:CALLED]->(:Phone),(:PhoneCall)-[:CALLER]->(:Phone),(:Crime)-[:INVESTIGATED_BY]->(:Officer),(:Crime)-[:OCCURRED_AT]->(:Location),(:Object)-[:INVOLVED_IN]->(:Crime),(:Vehicle)-[:INVOLVED_IN]->(:Crime)\""}, {"from": "gpt", "value": "MATCH (p:Person)-[:PARTY_TO]->(c:Crime) WHERE c.description CONTAINS 'fraud' RETURN p"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities registered at a specific address \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e:Entity)-[:registered_address]->(a:Address {address: 'specific address'}) RETURN e, a"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all intermediaries associated with a specific entity \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity {name: 'specific entity'}) RETURN i, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all officers who have the same name as a given officer \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer {name: 'given officer'})-[:same_name_as]->(o2:Officer) RETURN o1, o2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: List all entities that have the same company as a given entity \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e1:Entity {name: 'given entity'})-[:same_company_as]->(e2:Entity) RETURN e1, e2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Retrieve all addresses that are marked as the same as a given address \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (a1:Address {address: 'given address'})-[:same_as]->(a2:Address) RETURN a1, a2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find entities connected to a specific intermediary \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (i:Intermediary {name: 'specific intermediary'})-[:connected_to]->(e:Entity) RETURN i, e"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all entities that are similar to a specific company \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (e1:Entity {name: 'specific company'})-[:similar_company_as]->(e2:Entity) RETURN e1, e2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all officers that probably have the same identity as a given officer \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer {name: 'given officer'})-[:probably_same_officer_as]->(o2:Officer) RETURN o1, o2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Get all officers underlying a specific officer \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o1:Officer {name: 'specific officer'})-[:underlying]->(o2:Officer) RETURN o1, o2"}]}
{"conversations": [{"from": "system", "value": "You are an assistant that takes a natural language query (NLQ) and a graph database schema to produce a NEO4J Cypher query."}, {"from": "human", "value": "\nNLQ: Find all entities with the same name as a given officer \nSchema: Node properties are the following: \":Entity {countries: STRING, lastEditTimestamp: STRING, ibcRUC: STRING, valid_until: STRING, country_codes: STRING, service_provider: STRING, address: STRING, inactivation_date: STRING, struck_off_date: STRING, status: STRING, jurisdiction_description: STRING, incorporation_date: STRING, original_name: STRING, jurisdiction: STRING, internal_id: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, former_name: STRING, tax_stat_description: STRING, company_type: STRING, note: STRING, dorm_date: STRING, type: STRING, closed_date: STRING, company_number: STRING, comments: STRING, entity_number: STRING},:Intermediary {lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, status: STRING, address: STRING, valid_until: STRING, name: STRING, node_id: INTEGER, sourceID: STRING, internal_id: STRING, note: STRING, registered_office: STRING},:Officer {valid_until: STRING, sourceID: STRING, name: STRING, icij_id: STRING, node_id: INTEGER, lastEditTimestamp: STRING, country_codes: STRING, countries: STRING, note: STRING, status: STRING},:Address {original_address: STRING, lastEditTimestamp: STRING, countries: STRING, address: STRING, valid_until: STRING, icij_id: STRING, node_id: INTEGER, sourceID: STRING, country_codes: STRING, note: STRING, name: STRING, addressID: STRING, country_code: STRING, country: STRING},:Other {incorporation_date: STRING, valid_until: STRING, name: STRING, jurisdiction: STRING, closed_date: STRING, jurisdiction_description: STRING, node_id: INTEGER, sourceID: STRING, lastEditTimestamp: STRING, type: STRING, note: STRING, struck_off_date: STRING, countries: STRING, country_codes: STRING}\" Relationship properties are the following: \":registered_address {link: STRING, sourceID: STRING, valid_until: STRING, lastEditTimestamp: STRING},:intermediary_of {valid_until: STRING, sourceID: STRING, link: STRING, end_date: STRING, start_date: STRING, lastEditTimestamp: STRING},:officer_of {link: STRING, valid_until: STRING, sourceID: STRING, start_date: STRING, end_date: STRING, status: STRING, lastEditTimestamp: STRING},:underlying {link: STRING, valid_until: STRING, sourceID: STRING, lastEditTimestamp: STRING},:similar {link: STRING},:same_as {link: STRING},:same_name_as {sourceID: STRING, link: STRING, valid_until: STRING, lastEditTimestamp: STRING},:same_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:same_intermediary_as {link: STRING, valid_until: STRING, sourceID: STRING},:similar_company_as {valid_until: STRING, sourceID: STRING, link: STRING},:probably_same_officer_as {link: STRING, valid_until: STRING, sourceID: STRING},:same_id_as {sourceID: STRING, link: STRING, valid_until: STRING},:connected_to {valid_until: STRING, link: STRING, sourceID: STRING}\" Relationship point from source to target nodes \"(:Entity)-[:registered_address]->(:Address),(:Entity)-[:same_as]->(:Entity),(:Entity)-[:same_company_as]->(:Entity),(:Entity)-[:similar_company_as]->(:Entity),(:Entity)-[:same_name_as]->(:Officer),(:Intermediary)-[:intermediary_of]->(:Entity),(:Intermediary)-[:similar]->(:Intermediary),(:Intermediary)-[:registered_address]->(:Address),(:Intermediary)-[:officer_of]->(:Entity),(:Intermediary)-[:underlying]->(:Officer),(:Intermediary)-[:same_intermediary_as]->(:Intermediary),(:Intermediary)-[:same_name_as]->(:Intermediary),(:Intermediary)-[:connected_to]->(:Entity),(:Intermediary)-[:same_as]->(:Officer),(:Officer)-[:officer_of]->(:Entity),(:Officer)-[:registered_address]->(:Address),(:Officer)-[:similar]->(:Officer),(:Officer)-[:intermediary_of]->(:Entity),(:Officer)-[:underlying]->(:Officer),(:Officer)-[:same_name_as]->(:Officer),(:Officer)-[:probably_same_officer_as]->(:Officer),(:Officer)-[:connected_to]->(:Entity),(:Officer)-[:same_id_as]->(:Officer),(:Address)-[:same_as]->(:Address),(:Other)-[:registered_address]->(:Address),(:Other)-[:connected_to]->(:Entity),(:Other)-[:same_name_as]->(:Entity),(:Other)-[:underlying]->(:Entity)\""}, {"from": "gpt", "value": "MATCH (o:Officer {name: 'given officer'})-[:same_name_as]->(e:Entity) RETURN o, e"}]}
